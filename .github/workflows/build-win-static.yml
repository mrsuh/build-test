name: Build Qt App (Windows x86_64)

on:
  push:
    branches: [ main ]

env:
  APP_NAME: MyQtApp
  QT_VERSION: "6.8.3"

  # qtbase
  QTBASE_SRC: ${{ github.workspace }}/dependencies/qtbase
  QTBASE_BUILD: ${{ github.workspace }}/dependencies/qtbase/build
  QTBASE_INSTALL: ${{ github.workspace }}/dependencies/qtbase/install

  # qttools (для windeployqt)
  QTTOOLS_SRC: ${{ github.workspace }}/dependencies/qttools
  QTTOOLS_BUILD: ${{ github.workspace }}/dependencies/qttools/build
  QTTOOLS_INSTALL: ${{ github.workspace }}/dependencies/qttools/install

  # PoDoFo
  PODOFO_SRC: ${{ github.workspace }}/dependencies/podofo
  PODOFO_BUILD: ${{ github.workspace }}/dependencies/podofo/build
  PODOFO_INSTALL: ${{ github.workspace }}/dependencies/podofo/install

  # vcpkg
  VCPKG_ROOT: ${{ github.workspace }}\vcpkg
  VCPKG_TRIPLET: x64-windows-static-md

jobs:
  windows-x64:
    name: Windows x86_64
    runs-on: windows-2022
    timeout-minutes: 75

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install tools (Ninja, 7zip, Git)
        shell: pwsh
        run: |
          choco install -y ninja 7zip git
          ninja --version
          7z

      # ---------- Qt: qtbase ----------
      - name: Cache qtbase install
        id: cache-qt-base
        uses: actions/cache@v4
        with:
          path: ${{ env.QTBASE_INSTALL }}
          key: qt-base-${{ runner.os }}-x64-${{ env.QT_VERSION }}

      - name: Checkout qtbase sources
        if: steps.cache-qt-base.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: qt/qtbase
          path: dependencies/qtbase
          ref: v${{ env.QT_VERSION }}
          submodules: recursive
          fetch-depth: 1

      - name: Build & Install qtbase
        if: steps.cache-qt-base.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cmake -S "${env:QTBASE_SRC}" -B "${env:QTBASE_BUILD}" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${env:QTBASE_INSTALL}" `
            -DQT_BUILD_EXAMPLES=OFF `
            -DQT_BUILD_TESTS=OFF
          cmake --build "${env:QTBASE_BUILD}" --parallel
          cmake --install "${env:QTBASE_BUILD}"

      # ---------- Qt: qttools (для windeployqt) ----------
      - name: Cache qttools install
        id: cache-qt-tools
        uses: actions/cache@v4
        with:
          path: ${{ env.QTTOOLS_INSTALL }}
          key: qt-tools-${{ runner.os }}-x64-${{ env.QT_VERSION }}

      - name: Checkout qttools sources
        if: steps.cache-qt-tools.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: qt/qttools
          path: dependencies/qttools
          ref: v${{ env.QT_VERSION }}
          submodules: recursive
          fetch-depth: 1

      - name: Build & Install qttools
        if: steps.cache-qt-tools.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cmake -S "${env:QTTOOLS_SRC}" -B "${env:QTTOOLS_BUILD}" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${env:QTTOOLS_INSTALL}" `
            -DCMAKE_PREFIX_PATH="${env:QTBASE_INSTALL}" `
            -DQT_BUILD_EXAMPLES=OFF `
            -DQT_BUILD_TESTS=OFF
          cmake --build "${env:QTTOOLS_BUILD}" --parallel
          cmake --install "${env:QTTOOLS_BUILD}"

      - name: Setup PATH for Qt tools
        shell: pwsh
        run: |
          echo "${env:QTBASE_INSTALL}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${env:QTTOOLS_INSTALL}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          where windeployqt

      # ---------- vcpkg (правильный action) ----------
      - name: Setup vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: 2025-08-01

      - name: Cache vcpkg binary artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\vcpkg\archives
            ~\AppData\Local\vcpkg\packages
          key: vcpkg-bincache-${{ runner.os }}-x64-static-md-1

      - name: Install PoDoFo deps via vcpkg (static-md)
        shell: pwsh
        run: |
          $vcpkg = "${{ env.VCPKG_ROOT }}\vcpkg.exe"
          & $vcpkg version
          # Минимальный набор зависимостей PoDoFo (статически, CRT /MD):
          & $vcpkg install `
            libxml2:${{ env.VCPKG_TRIPLET }} `
            openssl:${{ env.VCPKG_TRIPLET }} `
            libjpeg-turbo:${{ env.VCPKG_TRIPLET }} `
            libpng:${{ env.VCPKG_TRIPLET }} `
            tiff:${{ env.VCPKG_TRIPLET }} `
            zlib:${{ env.VCPKG_TRIPLET }} `
            freetype:${{ env.VCPKG_TRIPLET }} `
            liblzma:${{ env.VCPKG_TRIPLET }}
          # Примечание: fontconfig для Windows не требуется, поэтому не ставим.

      # ---------- PoDoFo из исходников (СТАТИЧЕСКИ) ----------
      - name: Cache PoDoFo install
        id: cache-podofo
        uses: actions/cache@v4
        with:
          path: ${{ env.PODOFO_INSTALL }}
          key: podofo-${{ runner.os }}-x64-static-md-src-1

      - name: Checkout PoDoFo sources
        if: steps.cache-podofo.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: podofo/podofo
          path: dependencies/podofo
          # ref: v0.10.3
          fetch-depth: 1
          submodules: recursive

      - name: Build & Install PoDoFo (static, vcpkg toolchain)
        if: steps.cache-podofo.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cmake -S "${env:PODOFO_SRC}" -B "${env:PODOFO_BUILD}" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${env:PODOFO_INSTALL}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }} `
            -DBUILD_SHARED_LIBS=OFF `
            -DPODOFO_BUILD_STATIC=ON `
            -DPODOFO_BUILD_SHARED=OFF `
            -DPODOFO_BUILD_EXAMPLES=OFF `
            -DPODOFO_BUILD_TOOLS=OFF `
            -DOPENSSL_USE_STATIC_LIBS=ON `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL
          cmake --build "${env:PODOFO_BUILD}" --parallel
          cmake --install "${env:PODOFO_BUILD}"

      - name: Configure (CMake)
        shell: pwsh
        run: |
          cmake -S . -B build -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="${env:QTBASE_INSTALL};${env:PODOFO_INSTALL}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }}

      - name: Build (CMake)
        shell: pwsh
        run: cmake --build build --parallel

      # ---------- Упаковка ----------
      - name: Package (windeployqt + zip)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $exe = Join-Path "build" "${env:APP_NAME}.exe"
          if (-not (Test-Path $exe)) { $exe = Join-Path "build/Release" "${env:APP_NAME}.exe" }
          if (-not (Test-Path $exe)) { throw "Executable not found: $exe" }

          $stage = "dist/${env:APP_NAME}-windows-x64"
          New-Item -ItemType Directory -Path $stage -Force | Out-Null
          Copy-Item $exe $stage/

          # Только Qt-зависимости (PoDoFo и его deps статик, DLL не нужны)
          windeployqt --release --compiler-runtime "$stage\${env:APP_NAME}.exe"

      - name: Upload artifact (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-x64
          path: dist/${{ env.APP_NAME }}-windows-x64
          if-no-files-found: error
          retention-days: 14
