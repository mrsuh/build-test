name: Build Qt App (Windows x86_64)

on:
  push:
    branches: [ main ]

env:
  APP_NAME: MyQtApp
  QT_VERSION: "6.8.3"

  # qtbase
  QTBASE_SRC: ${{ github.workspace }}/dependencies/qtbase
  QTBASE_BUILD: ${{ github.workspace }}/dependencies/qtbase/build
  QTBASE_INSTALL: ${{ github.workspace }}/dependencies/qtbase/install

  # qttools (для windeployqt)
  QTTOOLS_SRC: ${{ github.workspace }}/dependencies/qttools
  QTTOOLS_BUILD: ${{ github.workspace }}/dependencies/qttools/build
  QTTOOLS_INSTALL: ${{ github.workspace }}/dependencies/qttools/install

  # PoDoFo
  PODOFO_SRC: ${{ github.workspace }}/dependencies/podofo
  PODOFO_BUILD: ${{ github.workspace }}/dependencies/podofo/build
  PODOFO_INSTALL: ${{ github.workspace }}/dependencies/podofo/install

jobs:
  windows-x64:
    name: Windows x86_64
    runs-on: windows-2022
    timeout-minutes: 75

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install tools (Ninja, Git)
        shell: pwsh
        run: |
          choco install -y ninja git     

      # ---------- Qt: qtbase ----------
      - name: Cache qtbase install
        id: cache-qt-base
        uses: actions/cache@v4
        with:
          path: ${{ env.QTBASE_INSTALL }}
          key: qt-base-${{ runner.os }}-x64-${{ env.QT_VERSION }}

      - name: Checkout qtbase sources
        if: steps.cache-qt-base.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: qt/qtbase
          path: dependencies/qtbase
          ref: v${{ env.QT_VERSION }}
          submodules: recursive
          fetch-depth: 1

      - name: Build & Install qtbase
        if: steps.cache-qt-base.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cmake -S "${env:QTBASE_SRC}" -B "${env:QTBASE_BUILD}" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${env:QTBASE_INSTALL}" `
            -DQT_BUILD_EXAMPLES=OFF `
            -DQT_BUILD_TESTS=OFF
          cmake --build "${env:QTBASE_BUILD}" --parallel
          cmake --install "${env:QTBASE_BUILD}"

      # ---------- Qt: qttools (для windeployqt) ----------
      - name: Cache qttools install
        id: cache-qt-tools
        uses: actions/cache@v4
        with:
          path: ${{ env.QTTOOLS_INSTALL }}
          key: qt-tools-${{ runner.os }}-x64-${{ env.QT_VERSION }}

      - name: Checkout qttools sources
        if: steps.cache-qt-tools.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: qt/qttools
          path: dependencies/qttools
          ref: v${{ env.QT_VERSION }}
          submodules: recursive
          fetch-depth: 1

      - name: Build & Install qttools
        if: steps.cache-qt-tools.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cmake -S "${env:QTTOOLS_SRC}" -B "${env:QTTOOLS_BUILD}" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${env:QTTOOLS_INSTALL}" `
            -DCMAKE_PREFIX_PATH="${env:QTBASE_INSTALL}" `
            -DQT_BUILD_EXAMPLES=OFF `
            -DQT_BUILD_TESTS=OFF
          cmake --build "${env:QTTOOLS_BUILD}" --parallel
          cmake --install "${env:QTTOOLS_BUILD}"

      - name: Setup PATH for Qt tools
        shell: pwsh
        run: |
          echo "${env:QTBASE_INSTALL}\bin"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${env:QTTOOLS_INSTALL}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          where windeployqt

      # ---------- vcpkg (правильный action) ----------
      - name: Setup vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          # можно зафиксировать ревизию vcpkg: committish: 2025-08-01
          committish: master

      - name: Cache vcpkg binary artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\vcpkg\archives
            ~\AppData\Local\vcpkg\packages
          key: vcpkg-bincache-${{ runner.os }}-x64-1

      - name: Install PoDoFo dependencies via vcpkg
        shell: pwsh
        run: |
          $vcpkg = "${{ github.workspace }}\vcpkg\vcpkg.exe"
          & $vcpkg version
          # Библиотеки, которые обычно требуются PoDoFo:
          & $vcpkg install fontconfig:x64-windows freetype:x64-windows libxml2:x64-windows openssl:x64-windows libjpeg-turbo:x64-windows libpng:x64-windows tiff:x64-windows zlib:x64-windows          

      # ---------- PoDoFo из исходников ----------
      - name: Cache PoDoFo install
        id: cache-podofo
        uses: actions/cache@v4
        with:
          path: ${{ env.PODOFO_INSTALL }}
          key: podofo-${{ runner.os }}-x64-src-1

      - name: Checkout PoDoFo sources
        if: steps.cache-podofo.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: podofo/podofo
          path: dependencies/podofo
          # ref: v0.10.3 # при желании закрепи версию
          fetch-depth: 1
          submodules: recursive

      - name: Build & Install PoDoFo (from source, vcpkg toolchain)
        if: steps.cache-podofo.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cmake -S "${env:PODOFO_SRC}" -B "${env:PODOFO_BUILD}" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${env:PODOFO_INSTALL}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" `
            -DBUILD_SHARED_LIBS=ON `
            -DPODOFO_BUILD_EXAMPLES=OFF `
            -DPODOFO_BUILD_TOOLS=OFF
          cmake --build  "${env:PODOFO_BUILD}" --parallel
          cmake --install "${env:PODOFO_BUILD}"

      - name: Configure (CMake)
        shell: pwsh
        run: |
          cmake -S . -B build -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="${env:QTBASE_INSTALL};${env:PODOFO_INSTALL}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

      - name: Build (CMake)
        shell: pwsh
        run: cmake --build build --parallel

      # ---------- Упаковка ----------
      - name: Package (windeployqt + zip)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $exe = Join-Path "build" "${env:APP_NAME}.exe"
          if (-not (Test-Path $exe)) {
            $exe = Join-Path "build/Release" "${env:APP_NAME}.exe"
          }
          if (-not (Test-Path $exe)) { throw "Executable not found: $exe" }

          $stage = "dist/${env:APP_NAME}-windows-x64"
          New-Item -ItemType Directory -Path $stage -Force | Out-Null
          Copy-Item $exe $stage/

          # Qt runtime
          windeployqt --release --compiler-runtime "$stage\${env:APP_NAME}.exe"

          # DLL PoDoFo (если сборка shared)
          $podofoBin = "${env:PODOFO_INSTALL}\bin"
          if (Test-Path $podofoBin) { Copy-Item "$podofoBin\*.dll" $stage -ErrorAction SilentlyContinue }
          $podofoLib = "${env:PODOFO_INSTALL}\lib"
          if (Test-Path $podofoLib) { Copy-Item "$podofoLib\*.dll" $stage -ErrorAction SilentlyContinue }
                    
          $triplet = "x64-windows"
          $binDir = "${{ env.VCPKG_ROOT }}\installed\$triplet\bin"
          $patterns = @(
            "fontconfig-1.dll",
            "libxml2.dll",
            "libcrypto-3-x64.dll", "libssl-3-x64.dll",
            "liblzma*.dll",
            "libexpat*.dll",
            "bz2*.dll",
            "tiff*.dll", "libtiff*.dll",
            "zlib*.dll", "libpng*.dll", "jpeg*.dll", "libjpeg*.dll",
            "freetype*.dll", "brotli*.dll", "lzma*.dll", "iconv*.dll",
            "openjpeg*.dll", "podofo*.dll", "ssl*.dll", "crypto*.dll"
          )                    
          
          foreach ($p in $patterns) {
            Get-ChildItem -Path (Join-Path $binDir $p) -ErrorAction SilentlyContinue | `
            Copy-Item -Destination $stage -Force
          }          

          # Дополнительно: MSVC runtime (если windeployqt не подхватит)
          & where vcruntime140.dll  | ForEach-Object { Copy-Item $_ $stage -ErrorAction SilentlyContinue }
          & where vcruntime140_1.dll| ForEach-Object { Copy-Item $_ $stage -ErrorAction SilentlyContinue }
          & where msvcp140.dll      | ForEach-Object { Copy-Item $_ $stage -ErrorAction SilentlyContinue }                             

      - name: Add MSVC runtime (app-local)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $stage = "dist/${env:APP_NAME}-windows-x64"
          New-Item -ItemType Directory -Force -Path $stage | Out-Null

          $copied = $false

          # 1) Пробуем через переменную окружения (после ilammy/msvc-dev-cmd@v1 она есть)
          if ($env:VCToolsRedistDir) {
            $cand = Join-Path $env:VCToolsRedistDir "x64"
            $crtDirs = Get-ChildItem $cand -Directory -Filter "Microsoft.VC*.CRT" -ErrorAction SilentlyContinue |
                       Sort-Object Name -Descending
            if ($crtDirs) {
              Copy-Item (Join-Path $crtDirs[0].FullName "*.dll") $stage -Force
              Write-Host "CRT copied from $($crtDirs[0].FullName)"
              $copied = $true
            }
          }

          # 2) Фоллбэк: ищем установленную VS и самый свежий Redist
          if (-not $copied) {
            $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            $vs = & $vswhere -latest -products * `
                 -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
                 -property installationPath
            if (-not $vs) { throw "Visual Studio not found" }

            $redistRoot = Join-Path $vs "VC\Redist\MSVC"
            $verDir = Get-ChildItem $redistRoot -Directory | Sort-Object Name -Descending | Select-Object -First 1
            if (-not $verDir) { throw "MSVC Redist dir not found under $redistRoot" }

            $crtParent = Join-Path $verDir.FullName "x64"
            $vcDir = Get-ChildItem $crtParent -Directory -Filter "Microsoft.VC*.CRT" |
                     Sort-Object Name -Descending | Select-Object -First 1
            if (-not $vcDir) { throw "Microsoft.VC*.CRT not found under $crtParent" }

            Copy-Item (Join-Path $vcDir.FullName "*.dll") $stage -Force
            Write-Host "CRT copied from $($vcDir.FullName)"
          }

          # (опционально) скопировать UCRT (полезно для очень чистых машин)
          $ucrt = "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x64"
          if (Test-Path $ucrt) {
            Copy-Item (Join-Path $ucrt "*.dll") $stage -Force
            Write-Host "UCRT copied from $ucrt"
          }
                    
          Remove-Item -Force $stage\vc_redist.x64.exe    
          Remove-Item -Force $stage\dxil.dll    
          Remove-Item -Force $stage\dxcompiler.dll    
          Remove-Item -Force $stage\d3dcompiler_47.dll                  
                  
          Get-ChildItem $stage -File -Filter api-ms-*.dll | Remove-Item -Force
  
          # Быстрая проверка, что нужные DLL на месте
          Get-ChildItem $stage | Format-Table Name,Length                  

      - name: Upload artifact (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-x64
          path: dist/${{ env.APP_NAME }}-windows-x64
          if-no-files-found: error
          retention-days: 14
