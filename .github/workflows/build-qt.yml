name: Build Qt App (macOS arm64)

on:
  push:
    branches: [ main ]    

env:  
  APP_NAME: test
  QT_VERSION: "6.8.3"

jobs:
  macos-arm64:
    name: macOS arm64
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: 'mac'
          target: 'desktop'
          arch: clang_64
          cache: true    

      - name: Configure (CMake)
        run: |
          env
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_PREFIX_PATH="${QT_ROOT_DIR}"
          
      - name: Build (CMake)
        run: cmake --build build --config Release --parallel --target all

      - name: Package (DMG)
        shell: bash
        run: |
          set -euo pipefail
                  
          APP_PATH="build/${APP_NAME}.app"                
          
          macdeployqt "$APP_PATH" -always-overwrite -verbose=2
          
          macdeployqt "$APP_PATH" -dmg -always-overwrite -verbose=2          
         
          echo "DMG_PATH=build/${APP_NAME}.dmg" >> $GITHUB_ENV         

      - name: Upload artifact (DMG)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macOS-arm64-dmg
          path: ${{ env.DMG_PATH }}
          if-no-files-found: error
          retention-days: 14
  
  windows-x64:
    name: Windows x64
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'   # MSVC 2022 x64
          cache: true
          aqtversion: '==3.1.*'
          
      - name: Install Ninja (windows)
        run: choco install ninja          

      - name: Setup MSVC (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install CMake
        uses: lukka/get-cmake@v3.29.2

      # ---------- Build (CMake, Visual Studio generator) ----------
      - name: Configure (CMake)
        shell: pwsh
        run: |
          Get-ChildItem Env: | Format-Table -AutoSize
          cmake -S . -B build `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="$env:QT_ROOT_DIR"

      - name: Build (CMake)
        shell: pwsh
        run: cmake --build build --config Release --parallel --target ALL_BUILD

      # ---------- Package: windeployqt + ZIP ----------
      - name: Package (windeployqt)
        shell: pwsh
        run: |
          Get-ChildItem Env: | Format-Table -AutoSize
          $exe1 = "build/Release/${env:APP_NAME}.exe"
          $exe2 = "build/${env:APP_NAME}.exe"
          if (Test-Path $exe1) { $exe = $exe1 } elseif (Test-Path $exe2) { $exe = $exe2 } else {
            Write-Host "Executable not found. Listing build dir:" 
            Get-ChildItem -Recurse build | Select-Object FullName
            exit 1
          }
          Write-Host "Using exe: $exe"

          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item $exe dist/

          # Qt dependencies + MSVC runtime
          windeployqt.exe --release --compiler-runtime --dir dist "dist/${env:APP_NAME}.exe"
        
          Compress-Archive -Path dist\* -DestinationPath "${env:APP_NAME}-windows-x64.zip" -Force
          echo "ZIP_PATH=${env:APP_NAME}-windows-x64.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload artifact (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Windows-x64-zip
          path: ${{ env.ZIP_PATH }}
          if-no-files-found: error
          retention-days: 14
