name: Build Qt App (Static macOS arm64 & Windows x64)

on:
  push:
    branches: [ main ]    

env:
  APP_NAME: test
  QT_VERSION: "6.8.3"
  QT_STATIC_KEY: "qtstatic-6.8.3-widgets-gui-opengl-desktop"

jobs:
  macos-arm64:
    name: macOS arm64 (static Qt)
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew update
          brew install ninja coreutils

      - name: Restore static Qt from cache
        id: cache-qt-macos
        uses: actions/cache@v4
        with:
          path: |
            $HOME/qtstatic/${{ env.QT_VERSION }}/macos-arm64
          key: macos-arm64-${{ env.QT_STATIC_KEY }}

      - name: Fetch Qt sources (qtbase only)
        if: steps.cache-qt-macos.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch v${{ env.QT_VERSION }} https://code.qt.io/qt/qtbase.git

      - name: Build & Install Qt static (qtbase)
        if: steps.cache-qt-macos.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/qtstatic/${{ env.QT_VERSION }}/macos-arm64
          cmake -S qtbase -B qtbase-build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$HOME/qtstatic/${{ env.QT_VERSION }}/macos-arm64" \
            -DBUILD_SHARED_LIBS=OFF \
            -DQT_BUILD_TESTS=OFF \
            -DQT_BUILD_EXAMPLES=OFF \
            -DQT_FEATURE_gui=ON \
            -DQT_FEATURE_widgets=ON \
            -DQT_FEATURE_opengl=desktop \
            -DCMAKE_OSX_ARCHITECTURES=arm64
          cmake --build qtbase-build --parallel
          cmake --install qtbase-build

      - name: Configure app (static)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_PREFIX_PATH="$HOME/qtstatic/${{ env.QT_VERSION }}/macos-arm64/lib/cmake" \
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON
      - name: Build app
        run: cmake --build build --parallel --config Release

      - name: Package (.app -> zip)
        shell: bash
        run: |
          set -euo pipefail
          APP_PATH="build/${APP_NAME}.app"
          if [[ ! -d "$APP_PATH" ]]; then
            echo "Couldn't find .app at $APP_PATH"
            ls -la build || true
            exit 1
          fi
          ditto -c -k --keepParent "$APP_PATH" "build/${APP_NAME}-macos-arm64-static.zip"
          echo "ZIP_PATH=build/${APP_NAME}-macOS-arm64-static.zip" >> $GITHUB_ENV
          # унифицируем имя
          mv "build/${APP_NAME}-macos-arm64-static.zip" "build/${APP_NAME}-macOS-arm64-static.zip"

      - name: Upload artifact (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macOS-arm64-static
          path: ${{ env.ZIP_PATH }}
          if-no-files-found: error
          retention-days: 14

  windows-x64:
    name: Windows x64 (static Qt, MSVC)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          choco install ninja -y

      - name: Setup MSVC (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore static Qt from cache
        id: cache-qt-win
        uses: actions/cache@v4
        with:
          path: |
            C:\qtstatic\${{ env.QT_VERSION }}\msvc2022_64
          key: windows-x64-${{ env.QT_STATIC_KEY }}

      - name: Fetch Qt sources (qtbase only)
        if: steps.cache-qt-win.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          git clone --depth 1 --branch v${{ env.QT_VERSION }} https://code.qt.io/qt/qtbase.git

      - name: Build & Install Qt static (qtbase)
        if: steps.cache-qt-win.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "C:\qtstatic\${{ env.QT_VERSION }}\msvc2022_64" | Out-Null
          cmake -S qtbase -B qtbase-build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="C:/qtstatic/${{ env.QT_VERSION }}/msvc2022_64" `
            -DBUILD_SHARED_LIBS=OFF `
            -DQT_BUILD_TESTS=OFF `
            -DQT_BUILD_EXAMPLES=OFF `
            -DQT_FEATURE_gui=ON `
            -DQT_FEATURE_widgets=ON `
            -DQT_FEATURE_opengl=desktop `
            -DQT_FEATURE_static_runtime=ON `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
          cmake --build qtbase-build --parallel
          cmake --install qtbase-build

      - name: Configure app (static)
        shell: pwsh
        run: |
          $prefix="C:/qtstatic/${{ env.QT_VERSION }}/msvc2022_64/lib/cmake"
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="$prefix" `
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded

      - name: Build app
        shell: pwsh
        run: cmake --build build --parallel --config Release

      - name: Package (EXE -> zip)
        shell: pwsh
        run: |
          $exe1 = "build\\${env:APP_NAME}.exe"
          $exe2 = "build\\Release\\${env:APP_NAME}.exe"
          if (Test-Path $exe1) { $exe = $exe1 } elseif (Test-Path $exe2) { $exe = $exe2 } else {
            Write-Host "Executable not found. Listing build dir:"
            Get-ChildItem -Recurse build | Select-Object FullName
            exit 1
          }
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item $exe dist/
          Compress-Archive -Path dist\* -DestinationPath "${env:APP_NAME}-Windows-x64-static.zip" -Force
          echo "ZIP_PATH=${env:APP_NAME}-Windows-x64-static.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload artifact (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Windows-x64-static
          path: ${{ env.ZIP_PATH }}
          if-no-files-found: error
          retention-days: 14
